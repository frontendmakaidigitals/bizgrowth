name: Deploy Bizgrowth

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test --if-present
      - name: Build application
        run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: 65.20.74.159
        username: milestonehre
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          cd /home/milestonehre/bizgrowth
          
          # Create backup
          if [ -d ".next" ]; then
            cp -r .next .next.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Skip system package installation (no sudo access)
          echo "‚ö†Ô∏è Skipping system package installation (no sudo access)"
          
          # Use nvm to ensure correct Node.js version
          echo "üì¶ Ensuring correct Node.js version..."
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use 20 2>/dev/null || nvm install 20
          
          # Pull latest code
          git fetch origin
          git reset --hard origin/master
          
          # Clean installation
          echo "üì¶ Clean installation..."
          rm -rf node_modules
          npm cache clean --force
          
          # Install dependencies WITHOUT better-sqlite3 first
          echo "üöÄ Installing dependencies (excluding problematic native modules)..."
          # Create a temporary package.json without better-sqlite3
          cp package.json package.json.backup
          node -e "
            const pkg = require('./package.json');
            delete pkg.dependencies['better-sqlite3'];
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          
          npm ci
          
          # Restore original package.json
          mv package.json.backup package.json
          
          # Install better-sqlite3 separately with fallback
          echo "üî® Handling better-sqlite3..."
          npm install better-sqlite3 --build-from-source --fallback-to-build || \
          npm install better-sqlite3 --ignore-scripts || \
          echo "‚ö†Ô∏è better-sqlite3 installation failed, but continuing..."
          
          # Build application
          echo "üèóÔ∏è Building application..."
          npm run build
          
          # Restart PM2 process
          echo "üîÑ Restarting application..."
          pm2 restart bizgrowth || pm2 start npm --name "bizgrowth" -- start -- --port 3005
          
          sleep 10
    
    - name: Health check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: 65.20.74.159
        username: milestonehre
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          # Check if the application is responding
          for i in {1..5}; do
            if curl -f http://localhost:3005 > /dev/null 2>&1; then
              echo "‚úÖ Application is healthy"
              exit 0
            fi
            echo "‚è≥ Attempt $i: Waiting for application..."
            sleep 10
          done
          echo "‚ùå Application health check failed"
          exit 1
    
    - name: Rollback on failure
      if: failure()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: 65.20.74.159
        username: milestonehre
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo "üîÑ Deployment failed, attempting rollback..."
          cd /home/milestonehre/bizgrowth
          
          # Find latest backup
          BACKUP=$(ls -t .next.backup.* 2>/dev/null | head -n1)
          if [ -n "$BACKUP" ]; then
            echo "üì¶ Restoring from backup: $BACKUP"
            rm -rf .next
            mv "$BACKUP" .next
            pm2 restart bizgrowth
            echo "‚úÖ Rollback completed"
          else
            echo "‚ùå No backup found for rollback"
            pm2 restart bizgrowth
          fi